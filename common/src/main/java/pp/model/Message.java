/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package pp.model;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
        schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
    }

    public short v; // required
    public long time; // required
    public String m; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        V((short)1, "v"),
        TIME((short)2, "time"),
        M((short)3, "m");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // V
                    return V;
                case 2: // TIME
                    return TIME;
                case 3: // M
                    return M;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __V_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.M, new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
    }

    public Message() {
        this.v = (short)1;

    }

    public Message(
            short v,
            long time,
            String m)
    {
        this();
        this.v = v;
        setVIsSet(true);
        this.time = time;
        setTimeIsSet(true);
        this.m = m;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Message(Message other) {
        __isset_bitfield = other.__isset_bitfield;
        this.v = other.v;
        this.time = other.time;
        if (other.isSetM()) {
            this.m = other.m;
        }
    }

    public Message deepCopy() {
        return new Message(this);
    }

    @Override
    public void clear() {
        this.v = (short)1;

        setTimeIsSet(false);
        this.time = 0;
        this.m = null;
    }

    public short getV() {
        return this.v;
    }

    public Message setV(short v) {
        this.v = v;
        setVIsSet(true);
        return this;
    }

    public void unsetV() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V_ISSET_ID);
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
        return EncodingUtils.testBit(__isset_bitfield, __V_ISSET_ID);
    }

    public void setVIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V_ISSET_ID, value);
    }

    public long getTime() {
        return this.time;
    }

    public Message setTime(long time) {
        this.time = time;
        setTimeIsSet(true);
        return this;
    }

    public void unsetTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
        return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public String getM() {
        return this.m;
    }

    public Message setM(String m) {
        this.m = m;
        return this;
    }

    public void unsetM() {
        this.m = null;
    }

    /** Returns true if field m is set (has been assigned a value) and false otherwise */
    public boolean isSetM() {
        return this.m != null;
    }

    public void setMIsSet(boolean value) {
        if (!value) {
            this.m = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case V:
                if (value == null) {
                    unsetV();
                } else {
                    setV((Short)value);
                }
                break;

            case TIME:
                if (value == null) {
                    unsetTime();
                } else {
                    setTime((Long)value);
                }
                break;

            case M:
                if (value == null) {
                    unsetM();
                } else {
                    setM((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case V:
                return Short.valueOf(getV());

            case TIME:
                return Long.valueOf(getTime());

            case M:
                return getM();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case V:
                return isSetV();
            case TIME:
                return isSetTime();
            case M:
                return isSetM();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Message)
            return this.equals((Message)that);
        return false;
    }

    public boolean equals(Message that) {
        if (that == null)
            return false;

        boolean this_present_v = true;
        boolean that_present_v = true;
        if (this_present_v || that_present_v) {
            if (!(this_present_v && that_present_v))
                return false;
            if (this.v != that.v)
                return false;
        }

        boolean this_present_time = true;
        boolean that_present_time = true;
        if (this_present_time || that_present_time) {
            if (!(this_present_time && that_present_time))
                return false;
            if (this.time != that.time)
                return false;
        }

        boolean this_present_m = true && this.isSetM();
        boolean that_present_m = true && that.isSetM();
        if (this_present_m || that_present_m) {
            if (!(this_present_m && that_present_m))
                return false;
            if (!this.m.equals(that.m))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(Message other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetV()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetM()).compareTo(other.isSetM());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetM()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Message(");
        boolean first = true;

        sb.append("v:");
        sb.append(this.v);
        first = false;
        if (!first) sb.append(", ");
        sb.append("time:");
        sb.append(this.time);
        first = false;
        if (!first) sb.append(", ");
        sb.append("m:");
        if (this.m == null) {
            sb.append("null");
        } else {
            sb.append(this.m);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'v' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'time' because it's a primitive and you chose the non-beans generator.
        if (m == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'm' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class MessageStandardSchemeFactory implements SchemeFactory {
        public MessageStandardScheme getScheme() {
            return new MessageStandardScheme();
        }
    }

    private static class MessageStandardScheme extends StandardScheme<Message> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // V
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.v = iprot.readI16();
                            struct.setVIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.time = iprot.readI64();
                            struct.setTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // M
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.m = iprot.readString();
                            struct.setMIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetV()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'v' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetTime()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(V_FIELD_DESC);
            oprot.writeI16(struct.v);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(TIME_FIELD_DESC);
            oprot.writeI64(struct.time);
            oprot.writeFieldEnd();
            if (struct.m != null) {
                oprot.writeFieldBegin(M_FIELD_DESC);
                oprot.writeString(struct.m);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class MessageTupleSchemeFactory implements SchemeFactory {
        public MessageTupleScheme getScheme() {
            return new MessageTupleScheme();
        }
    }

    private static class MessageTupleScheme extends TupleScheme<Message> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI16(struct.v);
            oprot.writeI64(struct.time);
            oprot.writeString(struct.m);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.v = iprot.readI16();
            struct.setVIsSet(true);
            struct.time = iprot.readI64();
            struct.setTimeIsSet(true);
            struct.m = iprot.readString();
            struct.setMIsSet(true);
        }
    }

}

